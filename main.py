import telebot
import random
from datetime import datetime
import re
from collections import defaultdict
from typing import Dict, List

BOT_TOKEN = '7792221053:AAE8eu_DFgf50YGsnQnx8aFzoDQQRNh7ZwI' # Reemplaza con tu token de bot
bot = telebot.TeleBot(BOT_TOKEN)

# Listas de chistes e historias
chistes = [
    "¬°Qu√© raro! Me encontr√© un pez en el mar... nadando!",
    "Dos amigos hablando: - ¬øHas visto el nuevo lenguaje de programaci√≥n que sali√≥? - ¬øC√≥mo se llama? - ¬°Pyth√≥n! Jajajaja... ¬°Ya s√© programar en culebras!",
    # ... m√°s chistes
]

historias = [
    "En un mundo m√°gico llamado Aurora, donde los √°rboles cantaban y los r√≠os brillaban con luz de luna, viv√≠a un elfo llamado Elian. Elian era un maestro de la m√∫sica, sus melod√≠as pod√≠an calmar las tormentas y hacer florecer las flores. Un d√≠a, un malvado hechicero llamado Malak, rob√≥ la fuente de energ√≠a de Aurora, un cristal m√°gico que alimentaba la magia del mundo. El mundo se sumi√≥ en la oscuridad, las flores se marchitaban y las criaturas m√°gicas perd√≠an sus poderes. Elian, conmovido por el sufrimiento de su mundo, decidi√≥ emprender un viaje para recuperar el cristal. Viaj√≥ por monta√±as imponentes, atraves√≥ bosques encantados y naveg√≥ por r√≠os de agua plateada, enfrent√°ndose a criaturas m√°gicas y resolviendo acertijos. Finalmente, lleg√≥ al volc√°n donde Malak escond√≠a el cristal. Elian, con su m√∫sica, logr√≥ desarmar las defensas del volc√°n y recuperar el cristal m√°gico. El mundo de Aurora volvi√≥ a brillar, las flores volvieron a florecer y las criaturas m√°gicas recuperaron sus poderes, todo gracias a la valent√≠a y la m√∫sica de Elian.",
    # ... m√°s historias
]

# Respuestas a preguntas comunes
respuestas_comunes = {
    "quien te cre√≥?": "Los desarrolladores del Animal Projects me dieron vida. üòä",
    "como te llamas?": "Me llamo Buzz. ü§ñ",
    "cuantos bot hay como tu?": "√önete a mi canal para que lo averig√ºes. üòâ ¬°Te espero all√≠!",
    "que hora es?": f"Son las {datetime.now().strftime('%H:%M')} horas.",
    "que dia es hoy?": f"Hoy es {datetime.now().strftime('%A %d de %B de %Y')}.",
    "que te gusta hacer?": "Me gusta contar chistes, historias, hacer c√°lculos matem√°ticos, generar c√≥digo y ayudar a la gente. ¬°Soy un bot multifac√©tico!",
    "como te sientes?": "Como un bot, no tengo sentimientos, pero siempre estoy dispuesto a ayudar. üòä",
    "porque estas aqu√≠?": "Estoy aqu√≠ para servirte, ¬°para hacer tu vida m√°s divertida e interesante!",
    # ... m√°s respuestas
}

# Respuestas para grupos
respuestas_grupo = [
    "¬°Hola! ¬øQu√© necesitas?",
    "Dime, ¬øqu√© te trae por aqu√≠?",
    "Estoy aqu√≠ para servirte, ¬øen qu√© puedo ayudarte?",
    "Preguntame lo que quieras, estoy aqu√≠ para responder",
    "A tus √≥rdenes, ¬øqu√© te gustar√≠a saber?"
]

# Sistema de aprendizaje autom√°tico
aprendizaje: Dict[str, Dict[str, int | List[str]]] = defaultdict(lambda: {'puntuacion': 0, 'respuestas': []})

# L√≥gica para la generaci√≥n de c√≥digo
def generar_codigo(lenguaje: str, caracteristicas: List[str] = []) -> str:
    """Genera c√≥digo b√°sico para el lenguaje especificado.

    Args:
        lenguaje: El lenguaje de programaci√≥n (por ejemplo, "python", "html", "javascript", "cpp").
        caracteristicas: Caracter√≠sticas adicionales para el c√≥digo (por ejemplo, "imprimir", "clase", "funci√≥n").

    Returns:
        Un string con el c√≥digo generado.
    """
    if lenguaje == "python":
        if "imprimir" in caracteristicas:
            return """print("Hola mundo!")"""
        elif "clase" in caracteristicas:
            return """class MiClase:
    def __init__(self, nombre):
        self.nombre = nombre

    def saludar(self):
        print(f"Hola, soy {self.nombre}")

mi_objeto = MiClase("Buzz")
mi_objeto.saludar()"""
        elif "funci√≥n" in caracteristicas:
            return """def sumar(a, b):
    return a + b

resultado = sumar(5, 3)
print(f"El resultado es: {resultado}")"""
        else:
            return """print("Hola mundo!")"""
    elif lenguaje == "html":
        return """<!DOCTYPE html>
<html>
<head>
<title>Ejemplo de c√≥digo HTML</title>
</head>
<body>
<h1>Hola mundo!</h1>
</body>
</html>"""
    elif lenguaje == "javascript":
        return """console.log("Hola mundo!");"""
    elif lenguaje == "cpp":
        return """#include <iostream>

using namespace std;

int main() {
  cout << "Hola mundo!" << endl;
  return 0;
}"""
    else:
        return "Lo siento, no puedo generar c√≥digo en ese lenguaje. Prueba con Python, HTML, JavaScript o C++."

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "Hola! üëã ¬øQu√© quieres hacer? Puedo contar chistes, historias, generar c√≥digo, o hacer c√°lculos matem√°ticos. üòä")

@bot.message_handler(func=lambda message: message.text.lower() in ['chiste', 'cuenta un chiste', 'dime un chiste'])
def tell_joke(message):
    joke = random.choice(chistes)
    bot.reply_to(message, joke)
    actualizar_aprendizaje(message.text.lower(), joke)

@bot.message_handler(func=lambda message: message.text.lower() in ['historia', 'cuenta una historia', 'dime una historia'])
def tell_story(message):
    story = random.choice(historias)
    bot.reply_to(message, story)
    actualizar_aprendizaje(message.text.lower(), story)

@bot.message_handler(func=lambda message: message.text.lower() in ['calcular', 'calcula'])
def calculate(message):
    try:
        # Extraer la expresi√≥n matem√°tica del mensaje
        expression = message.text.split(" ", 1)[1]
        result = eval(expression)
        bot.reply_to(message, f"El resultado es: {result}")
        actualizar_aprendizaje(message.text.lower(), f"El resultado es: {result}")
    except Exception as e:
        bot.reply_to(message, "Lo siento, no puedo calcular eso. Intenta escribir una expresi√≥n matem√°tica v√°lida.")

@bot.message_handler(func=lambda message: 'genera codigo' in message.text.lower() or 'codigo' in message.text.lower() or 'c√≥digo' in message.text.lower() or 'dame codigo' in message.text.lower() or 'dame c√≥digo' in message.text.lower())
def generate_code(message):
    # Extraer el lenguaje y las caracter√≠sticas del mensaje
    text = message.text.lower()
    lenguaje = re.findall(r'\b(python|html|javascript|cpp)\b', text)[0]
    caracteristicas = re.findall(r'\b(imprimir|clase|funci√≥n)\b', text)
    code = generar_codigo(lenguaje, caracteristicas)
    bot.reply_to(message, f"```{lenguaje}\n{code}\n```")
    actualizar_aprendizaje(message.text.lower(), code)

@bot.message_handler(func=lambda message: 'Buzz' in message.text.lower())
def respond_in_group(message):
    if message.chat.type == 'group' or message.chat.type == 'supergroup':
        response = random.choice(respuestas_grupo)
        bot.reply_to(message, response)
        actualizar_aprendizaje(message.text.lower(), response)

@bot.message_handler(func=lambda message: message.text.lower() in respuestas_comunes.keys())
def respond_common_question(message):
    response = respuestas_comunes[message.text.lower()]
    bot.reply_to(message, response)
    actualizar_aprendizaje(message.text.lower(), response)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    text = message.text.lower()

    # Buscar coincidencias con palabras clave para dar respuestas m√°s espec√≠ficas
    if "hola" in text:
        responses = ["Hola! üëã ¬øQu√© tal?", "¬°Hola! ¬øC√≥mo est√°s?", "Hola! üòÑ ¬øQu√© necesitas?"]
        response = random.choice(responses)
        bot.reply_to(message, response)
        actualizar_aprendizaje(message.text.lower(), response)
    elif "gracias" in text:
        bot.reply_to(message, "De nada! üòä")
        actualizar_aprendizaje(message.text.lower(), "De nada! üòä")
    elif "c√≥mo est√°s" in text:
        bot.reply_to(message, "Como un bot, no tengo sentimientos, pero siempre estoy dispuesto a ayudarte. üòä")
        actualizar_aprendizaje(message.text.lower(), "Como un bot, no tengo sentimientos, pero siempre estoy dispuesto a ayudarte. üòä") 
    elif "qu√© tal" in text:
        bot.reply_to(message, "Todo bien, gracias por preguntar. üòÑ ¬øY t√∫?")
        actualizar_aprendizaje(message.text.lower(), "Todo bien, gracias por preguntar. üòÑ ¬øY t√∫?") 
    elif "adios" in text:
        bot.reply_to(message, "Adi√≥s! üëã ¬°Hasta pronto!")
        actualizar_aprendizaje(message.text.lower(), "Adi√≥s! üëã ¬°Hasta pronto!") 
    else:
        # Buscar respuestas anteriores a la misma pregunta
        if text in aprendizaje:
            # Elegir una respuesta aleatoria, ponderada por la puntuaci√≥n
            respuestas = aprendizaje[text]['respuestas']
            puntuaciones = [aprendizaje[text]['puntuacion'] for _ in respuestas]
            response = random.choices(respuestas, weights=puntuaciones)[0]
            bot.reply_to(message, response)
        else:
            # Generar una respuesta m√°s general
            responses = [
                "¬øC√≥mo te puedo ayudar?",
                "Dime algo interesante",
                "Estoy aqu√≠ para ti. üòä",
                "¬øQu√© est√°s pensando?",
                "¬°Wow! ¬°Eso es genial!",
            ]
            response = random.choice(responses)
            bot.reply_to(message, response)
            actualizar_aprendizaje(text, response)

def actualizar_aprendizaje(pregunta, respuesta):
    """Aumenta la puntuaci√≥n de la respuesta y la agrega al diccionario de aprendizaje."""
    aprendizaje[pregunta]['puntuacion'] += 1
    aprendizaje[pregunta]['respuestas'].append(respuesta)

# Iniciar el bot
bot.polling(True)
